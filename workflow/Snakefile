import sys
import os
from pathlib import Path

env_name = os.getenv('CONDA_DEFAULT_ENV')
print(f"Current Conda environment: {env_name}")

CONFIG = "config/config_CD19_BBz.yml"
configfile: CONFIG
#SRC=config["source_dir"] #only in use for r script scirp, will be removed sooner or later
SAMPLES = expand(config["samples"]) 
outdir = os.path.join(config["processing_dir"],str(config["experiment"]))
fragmentsize=config["fragment_size"]

print(os.getcwd())
runner="/github/workspace/workflow/scripts"
sys.path.insert(0, runner)
# Find the absolute path to the current Snakefile directory
snakefile_dir = os.path.dirname(os.path.abspath(__file__))
print(snakefile_dir)
# Set the correct scripts directory path
script_dir = os.path.join(snakefile_dir, "scripts")
print(script_dir)

# Ensure the script directory is in sys.path
if script_dir not in sys.path:
    sys.path.insert(0, script_dir)

simple=os.path.join(os.getcwd(), "scripts")
sys.path.insert(0, simple) 
print("___")
print(os.getcwd())
print(sys.path)
import VIS_helper_functions as vhf #custom functions to make snakemake pipeline leaner
print('Import successful')

#inmport rules
include: config["detection"]
include: config["functional_genomics"]
include: config["quality_control"]


#analysis-specific rules
#include: config["downstream"]

#development
#include: config["epigenetics"]
#include: config["variants"]
#include: config["development"]


#target rule        
rule all:
	input: 
		#detection
		expand(f"{outdir}/final/localization/ExactInsertions_{{sample}}.bed", sample=SAMPLES),
		f"{outdir}/final/localization/Heatmap_Insertion_Chr.png",
		f"{outdir}/final/localization/Insertion_length.png",
		
		#functional genomics
		expand(f"{outdir}/final/functional_genomics/Functional_distances_to_Insertions_{{sample}}.bed", sample=SAMPLES),
		expand(f"{outdir}/final/functional_genomics/Plot_Distance_to_Genes_{fragmentsize}_{{sample}}.png", sample=SAMPLES),
		expand(f"{outdir}/intermediate/localization/annotation/Annotation_gene_Insertions_{{sample}}.bed", sample=SAMPLES),
		expand(f"{outdir}/final/functional_genomics/Insertion_Scoring_{{sample}}.svg", sample=SAMPLES),
		#quality control
		expand(f"{outdir}/final/qc/mapq/{{sample}}_mapq_heatmap_image.png", sample=SAMPLES),
		expand(f"{outdir}/final/qc/Fragmentation/Insertions/insertions_{fragmentsize}_{{sample}}", sample=SAMPLES),
		expand(f"{outdir}/final/qc/Fragmentation/Longest_Interval/{{sample}}/", sample=SAMPLES),
		f"{outdir}/final/qc/multiqc_report.html",
		# process
		f"{outdir}/config_settings.yml",
		
    		# downstream
		#expand(f"{outdir}/intermediate/blastn/Filtered_Annotated_{fragmentsize}_InsertionMatches_{{sample}}.gff", sample=SAMPLES),
		#expand(f"{outdir}/final/functional_genomics/localization/{fragmentsize}_{{sample}}", sample=SAMPLES),
		
