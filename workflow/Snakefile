import sys
import os
from pathlib import Path

env_name = os.getenv('CONDA_DEFAULT_ENV')
print(f"Current environment (should be either 'VIS_minimal' or 'VIS_full'): {env_name}")

CONFIG = "config/config_CD19_BBz.yml"
configfile: CONFIG
#SRC=config["source_dir"] #only in use for r script scirp, will be removed sooner or later
SAMPLES = expand(config["samples"]) 
outdir = os.path.join(config["processing_dir"],str(config["experiment"]))
fragmentsize=config["fragment_size"]

# needs to be improved somehow. Maybe even by removing the global import and replacing every single fucntion with a local import line
#local functions - path to helper fucntions needs to be added to the sys path, otherwise import won't find the file
rootpath = os.path.join("workflow/scripts")
sys.path.append(rootpath)
cwd=os.getcwd()

import VIS_helper_functions as vhf #custom functions to make snakemake pipeline leaner

#inmport rules
include: config["detection"]
include: config["quality_control"]

#analysis-specific rules
#include: config["downstream"]

#development
#include: config["epigenetics"]
#include: config["variants"]
#include: config["development"]


#conditional rule all based on defined rules
conditional_output = list()

if "functional_genomics" in config:
	include: config["functional_genomics"]
	conditional_output.append(expand(f"{outdir}/final/functional_genomics/Functional_distances_to_Insertions_{{sample}}.bed", sample=SAMPLES))
	conditional_output.append(expand(f"{outdir}/final/functional_genomics/Functional_distances_to_Insertions_{{sample}}.bed", sample=SAMPLES))
	conditional_output.append(expand(f"{outdir}/intermediate/localization/annotation/Annotation_{{annotation}}_Insertions_{{sample}}.bed",
									annotation=[k.replace("annotate_", "") for k in config if k.startswith("annotate_")],
									sample=SAMPLES))

if "plot_functional_genomics" in config:

	import VIS_plot_functional_annotation_helper_functions as vhf_fa
	include: config["plot_functional_genomics"]

	conditional_output.append(expand(f"{outdir}/final/functional_genomics/Plot_Distance_to_Genes_{fragmentsize}_{{sample}}.png", sample=SAMPLES))
	conditional_output.append(expand(f"{outdir}/final/functional_genomics/Insertion_Scoring_{{sample}}.svg", sample=SAMPLES))

if "cmod" in config:
	include: config["cmod"]
	conditional_output.append(expand(f"{outdir}/intermediate/cmod/Isolated_Reads_{{sample}}.tsv", sample=SAMPLES))
	conditional_output.append(expand(f"{outdir}/intermediate/cmod/Calls_Isolated_Reads_{{sample}}.tsv", sample=SAMPLES))

rule all:
	input:
		#detection
		expand(f"{outdir}/final/localization/ExactInsertions_{{sample}}.bed", sample=SAMPLES),
		f"{outdir}/final/localization/Heatmap_Insertion_Chr.png",
		f"{outdir}/final/localization/Insertion_length.png",
		#quality control
		expand(f"{outdir}/final/qc/mapq/{{sample}}_mapq_heatmap_image.png", sample=SAMPLES),
		expand(f"{outdir}/final/qc/Fragmentation/Insertions/insertions_{fragmentsize}_{{sample}}", sample=SAMPLES),
		expand(f"{outdir}/final/qc/Fragmentation/Longest_Interval/{{sample}}/", sample=SAMPLES),
		f"{outdir}/final/qc/multiqc_report.html",
		# process
		f"{outdir}/config_settings.yml",
		# other output
		conditional_output
		# downstream
		#expand(f"{outdir}/intermediate/blastn/Filtered_Annotated_{fragmentsize}_InsertionMatches_{{sample}}.gff", sample=SAMPLES),
		#expand(f"{outdir}/final/functional_genomics/localization/{fragmentsize}_{{sample}}", sample=SAMPLES),
		# for msa
		#expand(f"{outdir}/intermediate/fasta/Inserted_sequence_{{sample}}.fa", sample=SAMPLES)